@page "/admin/users"
@layout AdminLayout
@inject HttpClient client
@inject IJSRuntime js
@inject IMatToaster matToaster
@attribute [Authorize(Roles = "Administrator,SuperAdmin")]

<div class="form-group">
    <a class="btn btn-themecolor" href="/admin/users/add"><i class="oi oi-plus"></i> Create New</a>
</div>
<br />

@if (users == null)
{
    <text>Loading...</text> }
else if (users.Length == 0)
{
    <text>No Records Found.</text> }
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Guid</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>User Name</th>
                <th>Role</th>
            </tr>
        </thead>
        <tbody>
            @foreach (UserViewModel user in users)
            {
                <tr>
                    <td>@user.UserGuId</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.UserName</td>
                    <td>@String.Join(",", user.Roles) </td>
                    <!--<td>-->
                    @*<a class="btn btn-success" href="developer/edit/@user.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => OpenDeleteDeveloperDialog(dev.Id))">Delete</button>*@
                    <!--<MatIconButton Icon="edit"></MatIconButton>
                        <MatIconButton Icon="delete"></MatIconButton>
                    </td>-->
                </tr>
            }

        </tbody>
    </table>}
@code {
    UserViewModel[] users { get; set; }
    protected override async Task OnInitializedAsync()
    {


        try
        {
            users = await client.GetFromJsonAsync<UserViewModel[]>("api/users/GetUsers");
            //var apiResponse = await client.GetNewtonsoftJsonAsync<List<Developer>>("api/developer");
            //int cnt = 0;
            //cnt++;
            matToaster.Add(users.Length.ToString() + " records found", MatToastType.Success, "Operation Successful");
            //if (apiResponse.IsSuccessStatusCode)
            //{
            //    matToaster.Add(apiResponse.Message, MatToastType.Success, "Operation Successful");
            //    developers = apiResponse.Result;
            //}
            //else
            //    matToaster.Add(apiResponse.Message, MatToastType.Danger, "Operation Failed");
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Operation Failed");
        }
    }

}
