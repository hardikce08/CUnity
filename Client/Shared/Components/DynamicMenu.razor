@inject HttpClient client
@*<div class="top-row pl-4 navbar navbar-dark">
        <a class="navbar-brand" href="">BlazorErrorComponentExample</a>
        <button class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>*@

<div  @onclick="ToggleNavMenu">
    @if (MenuList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <ul class="nav flex-column">
            @foreach (var mn in MenuList)
            {
                @if (mn.ParentMenuId == 0)
                {
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="@mn.PageName" @onclick="() => GetIsClicked(mn)">
                            <span class="@mn.IconName" aria-hidden="true"></span>@mn.MenuName
                        </NavLink>
                        <ul class="nav flex-column">
                            @foreach (var mn1 in MenuList)
                            {
                                @if (mn.Id == mn1.ParentMenuId)
                                {
                                    @if (expandSubNav && mn.Id == clickedMenu)
                                    {
                                        <li class="nav-item px-3">
                                            <NavLink class="nav-link" href="@mn1.PageName" @onclick="() => GetIsClicked(mn1)">
                                                <span class="@mn1.IconName" aria-hidden="true"></span>@mn1.MenuName
                                            </NavLink>
                                        </li>
                                    }
                                }
                            }
                        </ul>
                    </li>
                }
            }
        </ul>
    }
</div>
@code {
    private bool collapseNavMenu = true;
    public List<MenuInfo> MenuList { get; set; } = new List<MenuInfo>();
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private int clickedMenu = 0;
    private bool hasPageName = true;
    private bool expandSubNav;
    private int prevClieckedMenu = 0;
    private void ToggleNavMenu()
    {
        //if (hasPageName)
        //{
        collapseNavMenu = !collapseNavMenu;
        //}
}

    protected override async Task OnParametersSetAsync()
    {
        var a = await client.GetFromJsonAsync<MenuInfo[]>
    ("api/menu");
    MenuList = a.ToList();
    }
    //protected override async Task OnInitializedAsync()
    //{

    //}
    public void GetIsClicked(MenuInfo mn)
    {
    clickedMenu = mn.Id;
    @if (prevClieckedMenu != clickedMenu)
    {
        expandSubNav = false;
        @if (mn.PageName != "" || mn.MenuName == "Home")
        {
            hasPageName = true;
        }
        else
        {
            expandSubNav = !expandSubNav;
            hasPageName = false;
        }

    }
    else
    {
        expandSubNav = !expandSubNav;
    }
    prevClieckedMenu = clickedMenu;
    }
    }

